// Generated by gencpp from file lidar_localization/EKFStd.msg
// DO NOT EDIT!


#ifndef LIDAR_LOCALIZATION_MESSAGE_EKFSTD_H
#define LIDAR_LOCALIZATION_MESSAGE_EKFSTD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace lidar_localization
{
template <class ContainerAllocator>
struct EKFStd_
{
  typedef EKFStd_<ContainerAllocator> Type;

  EKFStd_()
    : header()
    , pos_x_std(0.0)
    , pos_y_std(0.0)
    , pos_z_std(0.0)
    , vel_x_std(0.0)
    , vel_y_std(0.0)
    , vel_z_std(0.0)
    , ori_w_std(0.0)
    , ori_x_std(0.0)
    , ori_y_std(0.0)
    , ori_z_std(0.0)
    , gyro_bias_x_std(0.0)
    , gyro_bias_y_std(0.0)
    , gyro_bias_z_std(0.0)
    , accel_bias_x_std(0.0)
    , accel_bias_y_std(0.0)
    , accel_bias_z_std(0.0)  {
    }
  EKFStd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pos_x_std(0.0)
    , pos_y_std(0.0)
    , pos_z_std(0.0)
    , vel_x_std(0.0)
    , vel_y_std(0.0)
    , vel_z_std(0.0)
    , ori_w_std(0.0)
    , ori_x_std(0.0)
    , ori_y_std(0.0)
    , ori_z_std(0.0)
    , gyro_bias_x_std(0.0)
    , gyro_bias_y_std(0.0)
    , gyro_bias_z_std(0.0)
    , accel_bias_x_std(0.0)
    , accel_bias_y_std(0.0)
    , accel_bias_z_std(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _pos_x_std_type;
  _pos_x_std_type pos_x_std;

   typedef double _pos_y_std_type;
  _pos_y_std_type pos_y_std;

   typedef double _pos_z_std_type;
  _pos_z_std_type pos_z_std;

   typedef double _vel_x_std_type;
  _vel_x_std_type vel_x_std;

   typedef double _vel_y_std_type;
  _vel_y_std_type vel_y_std;

   typedef double _vel_z_std_type;
  _vel_z_std_type vel_z_std;

   typedef double _ori_w_std_type;
  _ori_w_std_type ori_w_std;

   typedef double _ori_x_std_type;
  _ori_x_std_type ori_x_std;

   typedef double _ori_y_std_type;
  _ori_y_std_type ori_y_std;

   typedef double _ori_z_std_type;
  _ori_z_std_type ori_z_std;

   typedef double _gyro_bias_x_std_type;
  _gyro_bias_x_std_type gyro_bias_x_std;

   typedef double _gyro_bias_y_std_type;
  _gyro_bias_y_std_type gyro_bias_y_std;

   typedef double _gyro_bias_z_std_type;
  _gyro_bias_z_std_type gyro_bias_z_std;

   typedef double _accel_bias_x_std_type;
  _accel_bias_x_std_type accel_bias_x_std;

   typedef double _accel_bias_y_std_type;
  _accel_bias_y_std_type accel_bias_y_std;

   typedef double _accel_bias_z_std_type;
  _accel_bias_z_std_type accel_bias_z_std;





  typedef boost::shared_ptr< ::lidar_localization::EKFStd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lidar_localization::EKFStd_<ContainerAllocator> const> ConstPtr;

}; // struct EKFStd_

typedef ::lidar_localization::EKFStd_<std::allocator<void> > EKFStd;

typedef boost::shared_ptr< ::lidar_localization::EKFStd > EKFStdPtr;
typedef boost::shared_ptr< ::lidar_localization::EKFStd const> EKFStdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lidar_localization::EKFStd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lidar_localization::EKFStd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lidar_localization::EKFStd_<ContainerAllocator1> & lhs, const ::lidar_localization::EKFStd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pos_x_std == rhs.pos_x_std &&
    lhs.pos_y_std == rhs.pos_y_std &&
    lhs.pos_z_std == rhs.pos_z_std &&
    lhs.vel_x_std == rhs.vel_x_std &&
    lhs.vel_y_std == rhs.vel_y_std &&
    lhs.vel_z_std == rhs.vel_z_std &&
    lhs.ori_w_std == rhs.ori_w_std &&
    lhs.ori_x_std == rhs.ori_x_std &&
    lhs.ori_y_std == rhs.ori_y_std &&
    lhs.ori_z_std == rhs.ori_z_std &&
    lhs.gyro_bias_x_std == rhs.gyro_bias_x_std &&
    lhs.gyro_bias_y_std == rhs.gyro_bias_y_std &&
    lhs.gyro_bias_z_std == rhs.gyro_bias_z_std &&
    lhs.accel_bias_x_std == rhs.accel_bias_x_std &&
    lhs.accel_bias_y_std == rhs.accel_bias_y_std &&
    lhs.accel_bias_z_std == rhs.accel_bias_z_std;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lidar_localization::EKFStd_<ContainerAllocator1> & lhs, const ::lidar_localization::EKFStd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lidar_localization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lidar_localization::EKFStd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_localization::EKFStd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_localization::EKFStd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_localization::EKFStd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_localization::EKFStd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_localization::EKFStd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lidar_localization::EKFStd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e9c1dfcaa6649033a40105a26a0f620";
  }

  static const char* value(const ::lidar_localization::EKFStd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e9c1dfcaa664903ULL;
  static const uint64_t static_value2 = 0x3a40105a26a0f620ULL;
};

template<class ContainerAllocator>
struct DataType< ::lidar_localization::EKFStd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lidar_localization/EKFStd";
  }

  static const char* value(const ::lidar_localization::EKFStd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lidar_localization::EKFStd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# time of ESKF estimation:\n"
"Header header\n"
"\n"
"# a. position:\n"
"float64 pos_x_std\n"
"float64 pos_y_std\n"
"float64 pos_z_std\n"
"\n"
"# b. velocity:\n"
"float64 vel_x_std\n"
"float64 vel_y_std\n"
"float64 vel_z_std\n"
"\n"
"# c. orientation:\n"
"float64 ori_w_std\n"
"float64 ori_x_std\n"
"float64 ori_y_std\n"
"float64 ori_z_std\n"
"\n"
"# d. gyro. bias:\n"
"float64 gyro_bias_x_std\n"
"float64 gyro_bias_y_std\n"
"float64 gyro_bias_z_std\n"
"\n"
"# e. accel. bias:\n"
"float64 accel_bias_x_std\n"
"float64 accel_bias_y_std\n"
"float64 accel_bias_z_std\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::lidar_localization::EKFStd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lidar_localization::EKFStd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pos_x_std);
      stream.next(m.pos_y_std);
      stream.next(m.pos_z_std);
      stream.next(m.vel_x_std);
      stream.next(m.vel_y_std);
      stream.next(m.vel_z_std);
      stream.next(m.ori_w_std);
      stream.next(m.ori_x_std);
      stream.next(m.ori_y_std);
      stream.next(m.ori_z_std);
      stream.next(m.gyro_bias_x_std);
      stream.next(m.gyro_bias_y_std);
      stream.next(m.gyro_bias_z_std);
      stream.next(m.accel_bias_x_std);
      stream.next(m.accel_bias_y_std);
      stream.next(m.accel_bias_z_std);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EKFStd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lidar_localization::EKFStd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lidar_localization::EKFStd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pos_x_std: ";
    Printer<double>::stream(s, indent + "  ", v.pos_x_std);
    s << indent << "pos_y_std: ";
    Printer<double>::stream(s, indent + "  ", v.pos_y_std);
    s << indent << "pos_z_std: ";
    Printer<double>::stream(s, indent + "  ", v.pos_z_std);
    s << indent << "vel_x_std: ";
    Printer<double>::stream(s, indent + "  ", v.vel_x_std);
    s << indent << "vel_y_std: ";
    Printer<double>::stream(s, indent + "  ", v.vel_y_std);
    s << indent << "vel_z_std: ";
    Printer<double>::stream(s, indent + "  ", v.vel_z_std);
    s << indent << "ori_w_std: ";
    Printer<double>::stream(s, indent + "  ", v.ori_w_std);
    s << indent << "ori_x_std: ";
    Printer<double>::stream(s, indent + "  ", v.ori_x_std);
    s << indent << "ori_y_std: ";
    Printer<double>::stream(s, indent + "  ", v.ori_y_std);
    s << indent << "ori_z_std: ";
    Printer<double>::stream(s, indent + "  ", v.ori_z_std);
    s << indent << "gyro_bias_x_std: ";
    Printer<double>::stream(s, indent + "  ", v.gyro_bias_x_std);
    s << indent << "gyro_bias_y_std: ";
    Printer<double>::stream(s, indent + "  ", v.gyro_bias_y_std);
    s << indent << "gyro_bias_z_std: ";
    Printer<double>::stream(s, indent + "  ", v.gyro_bias_z_std);
    s << indent << "accel_bias_x_std: ";
    Printer<double>::stream(s, indent + "  ", v.accel_bias_x_std);
    s << indent << "accel_bias_y_std: ";
    Printer<double>::stream(s, indent + "  ", v.accel_bias_y_std);
    s << indent << "accel_bias_z_std: ";
    Printer<double>::stream(s, indent + "  ", v.accel_bias_z_std);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDAR_LOCALIZATION_MESSAGE_EKFSTD_H
